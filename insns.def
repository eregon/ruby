/** ##skip -*- mode:c; style:ruby; coding: utf-8 -*-
  insns.def - YARV RTL instruction definitions

  $Author: $
  created at: 04/01/01 01:17:55 JST

  Copyright (C) 2004-2007 Koichi Sasada

  Rewritten in 2017 by Vladimir Makarov <vmakarov@redhat.com> to
  implement RTL insns

*/

/* The file describes RTL (Register Transfer Language) insns.  We keep
   minimal code here.  The RTL insn semantics are actually implemented
   in file rtl_exec.c.  Please, read comments there to understand what
   the insns do.

   Code for most insns here is just a call of the corresponding
   function.  There is a strict correspondence between the insn name
   and the corresponding function name and between insn operands and
   their types and the function arguments and their types.  It is done
   to simplify JIT compilation by mostly translating each RTL insn
   into the corresponding function call in the JIT generated code.


   Some abbreviations in the insn names:

   temp   - a temporary variable in the current stack frame.  It is
            addressed by negative integers
   loc    - a Ruby local variable (environemnt variable in MRI terms)
            of the current scope.  It is addressed by positive integers
   var    - temp or local
   uploc  - a Ruby local variable from an upper level
   ivar   - a Ruby instance variable
   cvar   - a Ruby class variable
   global - a Ruby global variable

   Some prefixes in the insn names:
     u - an unchanging general insn.  Some general insns can be
         transformed into speculative ones and after that into the
         unchanging insns if the speculation was wrong
     i - a speculative insn assuming integer operands
     f - a speculative insn assuming floating point operands

   Some insn operand types:

     lindex_t - offset on the stack or in the environment.  Positive
                value means local var, negative value means a
                temporary var.  The function implementing the insn get
                the address of the local or temporary operand as an
                argument
     rindex_t - the same as above but the offset is passed to besides
                the address
     sindex_t - a negative number which offset of the temporary on the
                stack. Only the number itself is passed as an argument

  instruction format:
    DEFINE_INSN
    instruction_name ..
    (instruction_operands, ..)
    (pop_values, ..)
    (return value)
    {
       .. // insn body
    }

    DEFINE_INSN can define more one similar insns.  Macro
    CURRENT_INSN_NAME is defined in the body and contains the name of
    the currently executed insn.

    Instruction operand can be underscore "_" or "<type> _".  It means
    we ignore the operand completely for execution of this insn in the
    interpreter.  Just underscore also means don't pass the operand in
    JIT generated code to a function executing the insn.

    TODO: Remove pop_values and the return value as RTL insns never
    use them.
*/


/* NOP */
DEFINE_INSN
nop
()
()
()
{
    nop_f(reg_cfp);
}

DEFINE_INSN
trace
(rb_num_t nf)
()
()
{
    trace_f(th, reg_cfp, nf);
}

DEFINE_INSN
var2var
(rindex_t to, lindex_t from, rb_num_t n)
()
()
{
    var2var_f(reg_cfp, get_var_addr(reg_cfp, to), to, get_var_addr(reg_cfp, from), n);
}

DEFINE_INSN
var_swap
(rindex_t op1, rindex_t op2)
()
()
{
    var_swap_f(reg_cfp, get_var_addr(reg_cfp, op1), op1, get_var_addr(reg_cfp, op2), op2);
}

DEFINE_INSN
temp2temp
(lindex_t res, lindex_t op)
()
()
{
    temp2temp_f(reg_cfp, get_temp_addr(reg_cfp, res), get_temp_addr(reg_cfp, op));
}

DEFINE_INSN
temp_swap
(lindex_t op1, lindex_t op2)
()
()
{
    temp_swap_f(reg_cfp, get_temp_addr(reg_cfp, op1), get_temp_addr(reg_cfp, op2));
}

DEFINE_INSN
loc2loc
(rindex_t res, lindex_t op)
()
()
{
    loc2loc_f(reg_cfp, get_loc_addr(reg_cfp, res), res, get_loc_addr(reg_cfp, op));
}

DEFINE_INSN
loc2temp
(lindex_t res, lindex_t op)
()
()
{
    loc2temp_f(reg_cfp, get_temp_addr(reg_cfp, res), get_loc_addr(reg_cfp, op));
}

DEFINE_INSN
temp2loc
(rindex_t res, lindex_t op)
()
()
{
    temp2loc_f(reg_cfp, get_loc_addr(reg_cfp, res), res, get_temp_addr(reg_cfp, op));
}

DEFINE_INSN
uploc2temp
(lindex_t res, sindex_t op, rb_num_t level)
()
()
{
    uploc2temp_f(reg_cfp, get_var_addr(reg_cfp, res), op, level);
}

DEFINE_INSN
uploc2var
(rindex_t res, sindex_t op, rb_num_t level)
()
()
{
    uploc2var_f(reg_cfp, get_var_addr(reg_cfp, res), res, op, level);
}

DEFINE_INSN
val2loc
(rindex_t res, VALUE val)
()
()
{
    val2loc_f(reg_cfp, get_loc_addr(reg_cfp, res), res, val);
}

DEFINE_INSN
val2temp
(lindex_t res, VALUE val)
()
()
{
    val2temp_f(reg_cfp, get_temp_addr(reg_cfp, res), val);
}

DEFINE_INSN
str2var
(rindex_t res, VALUE str)
()
()
{
    str2var_f(reg_cfp, get_var_addr(reg_cfp, res), res, str);
}

DEFINE_INSN
const2var
(ID id, rindex_t res, lindex_t klass_op)
()
()
{
    const2var_f(th, reg_cfp, id, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, klass_op));
}

DEFINE_INSN
const_ld_val
(ID id, rindex_t res, VALUE klass)
()
()
{
    const_ld_val_f(th, reg_cfp, id, get_var_addr(reg_cfp, res), res, klass);
}

DEFINE_INSN
const_cached_val_ld
(rindex_t res, VALUE klass, ID id, IC ic)
()
()
{
    const_cached_val_ld_f(th, reg_cfp, get_var_addr(reg_cfp, res), res, klass, id, ic);
}

DEFINE_INSN
get_inline_cache
(OFFSET dst, rindex_t res, IC ic)
()
()
{
    if (get_inline_cache_f(reg_cfp, get_var_addr(reg_cfp, res), res, ic))
	JUMP(dst);
}

DEFINE_INSN
set_inline_cache
(lindex_t op, IC ic)
()
()
{
    set_inline_cache_f(reg_cfp, get_var_addr(reg_cfp, op), ic);
}

DEFINE_INSN
specialobj2var
(rindex_t res, rb_num_t value_type)
()
()
{
    specialobj2var_f(reg_cfp, get_var_addr(reg_cfp, res), res, value_type);
}

DEFINE_INSN
special2var
(rindex_t res, rb_num_t key, rb_num_t type)
()
()
{
    special2var_f(th, reg_cfp, get_var_addr(reg_cfp, res), res, key, type);
}

DEFINE_INSN
self2var
(rindex_t res)
()
()
{
    self2var_f(reg_cfp, get_var_addr(reg_cfp, res), res);
}

DEFINE_INSN
global2var
(rindex_t res, GENTRY entry)
()
()
{
    global2var_f(reg_cfp, get_var_addr(reg_cfp, res), res, entry);
}

DEFINE_INSN
ivar2var
(rindex_t res, ID id, IC ic)
()
()
{
    ivar2var_f(reg_cfp, get_var_addr(reg_cfp, res), res, id, ic);
}

DEFINE_INSN
cvar2var
(rindex_t res, ID id)
()
()
{
    cvar2var_f(reg_cfp, get_var_addr(reg_cfp, res), res, id);
}

DEFINE_INSN
iseq2var
(rindex_t res, ISEQ iseq)
()
()
{
    iseq2var_f(reg_cfp, get_var_addr(reg_cfp, res), res, iseq);
}

DEFINE_INSN
var2uploc
(sindex_t idx, lindex_t from, rb_num_t level)
()
()
{
    var2uploc_f(reg_cfp, idx, get_var_addr(reg_cfp, from), level);
}

DEFINE_INSN
val2uploc
(sindex_t idx, VALUE val, rb_num_t level)
()
()
{
    val2uploc_f(reg_cfp, idx, val, level);
}

DEFINE_INSN
ret_to_loc
(sindex_t idx, lindex_t from)
()
()
{
    ret_to_loc_f(th, reg_cfp, idx, get_var_addr(reg_cfp, from));
    RESTORE_REGS();
    set_default_sp(reg_cfp, reg_cfp->bp);
}

DEFINE_INSN
ret_to_temp
(sindex_t idx, lindex_t from)
()
()
{
    ret_to_temp_f(th, reg_cfp, idx, get_var_addr(reg_cfp, from));
    RESTORE_REGS();
    set_default_sp(reg_cfp, reg_cfp->bp);
}

DEFINE_INSN
var2const
(ID id, lindex_t val_op, lindex_t cbase_op)
()
()
{
    var2const_f(reg_cfp, id, get_var_addr(reg_cfp, val_op), get_var_addr(reg_cfp, cbase_op));
}

DEFINE_INSN
var2global
(GENTRY entry, lindex_t val_op)
()
()
{
    var2global_f(reg_cfp, entry, get_var_addr(reg_cfp, val_op));
}

DEFINE_INSN
var2ivar
(ID id, IC ic, lindex_t val_op)
()
()
{
    var2ivar_f(reg_cfp, id, ic, get_var_addr(reg_cfp, val_op));
}

DEFINE_INSN
val2ivar
(ID id, IC ic, VALUE val)
()
()
{
    val2ivar_f(reg_cfp, id, ic, val);
}

DEFINE_INSN
var2cvar
(ID id, lindex_t val_op)
()
()
{
    var2cvar_f(reg_cfp, id, get_var_addr(reg_cfp, val_op));
}

DEFINE_INSN
var2special
(rb_num_t key, lindex_t op)
()
()
{
    var2special_f(th, reg_cfp, key, get_var_addr(reg_cfp, op));
}

/* The following insn is always a part of some bigger insn with one
   operand.  It is executed if the bigger insn is actually implemented
   by a send with usual dispatching.  The purpose of the insn
   execution to move the result from the stack to the bigger insn
   destination.  */
DEFINE_INSN
cont_op1
(CALL_DATA cd, rindex_t res, _)
()
()
{
    var_assign(reg_cfp, get_var_addr(reg_cfp, res), res, *get_temp_addr(reg_cfp, cd->call_start));
}

/* The following insn is always a part of some bigger insn with two
   operands.  See also the comment for cont_op1.  */
DEFINE_INSN
cont_op2
(CALL_DATA cd, rindex_t res, _, _)
()
()
{
    var_assign(reg_cfp, get_var_addr(reg_cfp, res), res, *get_temp_addr(reg_cfp, cd->call_start));
}

DEFINE_INSN
length size empty_p succ not
(insn_t _, CALL_DATA cd, rindex_t res, lindex_t op)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op))) {
	/* We actuall started a new ISEQ execution.  Change pc to
	   execute cont_op1 insn after the return. */
	th->cfp[1].pc -= 4;
	RESTORE_REGS();
	set_default_sp(reg_cfp, reg_cfp->bp);
    }
}

/* General and unchanging insns:  */
DEFINE_INSN
plus minus mult div mod ltlt ind eq ne lt gt le ge uplus uminus umult udiv umod uind ueq une ult ugt ule uge
(insn_t _, CALL_DATA cd, rindex_t res, lindex_t op1, lindex_t op2)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2))) {
	/* We actuall started a new ISEQ execution.  Change pc to
	   execute cont_op2 insn after the return. */
	th->cfp[1].pc -= 5;
	RESTORE_REGS();
	set_default_sp(reg_cfp, reg_cfp->bp);
    }
}

/* Speculative insns:  */
DEFINE_INSN
iplus iminus imult idiv imod aind hind ieq ine ilt igt ile ige fplus fminus fmult fdiv fmod feq fne flt fgt fle fge
(_, _, rindex_t res, lindex_t op1, lindex_t op2)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2))) {
	/* Speculation was wrong.  Re-execute the modified insn.  */
	ADD_PC(-6);
    }
}

/* General immediate insns:  */
DEFINE_INSN
plusi plusf minusi minusf multi multf divi divf modi modf ltlti indi inds eqi eqf nei nef lti ltf gti gtf lei lef gei gef
(insn_t _, CALL_DATA cd, rindex_t res, lindex_t op1, VALUE imm)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), imm)) {
	th->cfp[1].pc -= 5; /* Execute cont_op2 after */
	RESTORE_REGS();
        set_default_sp(reg_cfp, reg_cfp->bp);
    }
}

/* Unchanging immediate insns:  */
DEFINE_INSN
uplusi uplusf uminusi uminusf umulti umultf udivi udivf umodi umodf uindi uinds ueqi ueqf unei unef ulti ultf ugti ugtf ulei ulef ugei ugef
(insn_t _, CALL_DATA cd, rindex_t res, lindex_t op1, VALUE imm)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), imm)) {
	th->cfp[1].pc -= 5; /* Execute cont_op2 after */
	RESTORE_REGS();
        set_default_sp(reg_cfp, reg_cfp->bp);
    }
}

/* Speculative immediate insns:  */
DEFINE_INSN
iplusi iminusi imulti idivi imodi aindi hindi hinds ieqi inei ilti igti ilei igei fplusf fminusf fmultf fdivf fmodf feqf fnef fltf fgtf flef fgef
(_, _, rindex_t res, lindex_t op1, VALUE imm)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), imm)) {
	ADD_PC(-6); /* Re-execute the modified insn  */
    }
}

/* General and unchanging insns:  */
DEFINE_INSN
indset uindset
(CALL_DATA cd, lindex_t op1, lindex_t op2, lindex_t op3)
()
()
{
  if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), get_var_addr(reg_cfp, op3))) {
      RESTORE_REGS();
      set_default_sp(reg_cfp, reg_cfp->bp);
  }
}

/* Speculative insns:  */
DEFINE_INSN
aindset hindset
(_, lindex_t op1, lindex_t op2, lindex_t op3)
()
()
{
  if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), get_var_addr(reg_cfp, op3))) {
	ADD_PC(-5); /* Re-execute the modified insn  */
    }
}

/* General and unchanging immediate insns:  */
DEFINE_INSN
indseti indsets uindseti uindsets
(CALL_DATA cd, lindex_t op1, VALUE imm, lindex_t op3)
()
()
{
  if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, op1), imm, get_var_addr(reg_cfp, op3))) {
      RESTORE_REGS();
      set_default_sp(reg_cfp, reg_cfp->bp);
  }
}

/* Speculative immediate insns:  */
DEFINE_INSN
aindseti hindseti hindsets
(_, lindex_t op1, VALUE imm, lindex_t op3)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, op1), imm, get_var_addr(reg_cfp, op3))) {
	ADD_PC(-5); /* Re-execute the modified insn  */
    }
}

DEFINE_INSN
goto
(OFFSET dst)
()
()
{
    goto_f(th, reg_cfp);
    JUMP(dst);
}

/* First operand should be a label.  This is used in
   get_destination_insn for peephole optimizer in compile.c */
DEFINE_INSN
bf bt bnil
(OFFSET dst, lindex_t op)
()
()
{
    if (RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, get_var_addr(reg_cfp, op)))
	JUMP(dst);
}
DEFINE_INSN
cont_btcmp
(OFFSET dst, CALL_DATA cd, rindex_t res, _, _)
()
()
{
    VALUE val = *get_temp_addr(reg_cfp, cd->call_start);

    var_assign(reg_cfp, get_var_addr(reg_cfp, res), res, val);
    if (RTEST(val)) {
	RUBY_VM_CHECK_INTS(th);
	JUMP(dst);
    }
}

DEFINE_INSN
cont_bfcmp
(OFFSET dst, CALL_DATA cd, rindex_t res, _, _)
()
()
{
    VALUE val = *get_temp_addr(reg_cfp, cd->call_start);

    var_assign(reg_cfp, get_var_addr(reg_cfp, res), res, val);
    if (! RTEST(val)) {
	RUBY_VM_CHECK_INTS(th);
	JUMP(dst);
    }
}

/* The following insns are combined insns of (eq,ne,lt,gt,le,ge)[if] and (bt|bf):  */
DEFINE_INSN
bteq bfeq btne bfne btlt bflt btgt bfgt btle bfle btge bfge
(insn_t _, OFFSET dst, CALL_DATA cd, rindex_t res, lindex_t op1, lindex_t op2)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), &val);

    if (val == Qundef) {
	th->cfp[1].pc -= 6; /* Execute cont_btcmp/cont_bfcmp after */
        RESTORE_REGS();
	set_default_sp(reg_cfp, reg_cfp->bp);
    }
    else if (jmp_p)
	JUMP(dst);
}

/* Unchanging insns:  */
DEFINE_INSN
ubteq ubfeq ubtne ubfne ubtlt ubflt ubtgt ubfgt ubtle ubfle ubtge ubfge
(insn_t _, OFFSET dst, CALL_DATA cd, rindex_t res, lindex_t op1, lindex_t op2)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), &val);

    if (val == Qundef) {
	th->cfp[1].pc -= 6; /* Execute cont_btcmp/cont_bfcmp after */
        RESTORE_REGS();
	set_default_sp(reg_cfp, reg_cfp->bp);
    }
    else if (jmp_p)
	JUMP(dst);
}

/* Speculative integer insns:  */
DEFINE_INSN
ibteq ibfeq ibtne ibfne ibtlt ibflt ibtgt ibfgt ibtle ibfle ibtge ibfge
(_, OFFSET dst, _, rindex_t res, lindex_t op1, lindex_t op2)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), &val);

    if (val == Qundef) {
	ADD_PC(-7); /* Re-execute the modified insn  */
    }
    else if (jmp_p)
	JUMP(dst);
}

/* Speculative floating point insns:  */
DEFINE_INSN
fbteq fbfeq fbtne fbfne fbtlt fbflt fbtgt fbfgt fbtle fbfle fbtge fbfge
(_, OFFSET dst, _, rindex_t res, lindex_t op1, lindex_t op2)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), &val);

    if (val == Qundef) {
	ADD_PC(-7); /* Re-execute the modified insn  */
    }
    else if (jmp_p)
	JUMP(dst);
}

DEFINE_INSN
bteqi bfeqi btnei bfnei btlti bflti btgti bfgti btlei bflei btgei bfgei bteqf bfeqf btnef bfnef btltf bfltf btgtf bfgtf btlef bflef btgef bfgef
(insn_t _, OFFSET dst, CALL_DATA cd, rindex_t res, lindex_t op1, VALUE imm)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), imm, &val);

    if (val == Qundef) {
	th->cfp[1].pc -= 6; /* Execute cont_btcmp/cont_bfcmp after */
        RESTORE_REGS();
	set_default_sp(reg_cfp, reg_cfp->bp);
    } else if (jmp_p)
	JUMP(dst);
}

/* Unchanging immediate insns:  */
DEFINE_INSN
ubteqi ubfeqi ubtnei ubfnei ubtlti ubflti ubtgti ubfgti ubtlei ubflei ubtgei ubfgei ubteqf ubfeqf ubtnef ubfnef ubtltf ubfltf ubtgtf ubfgtf ubtlef ubflef ubtgef ubfgef
(insn_t _, OFFSET dst, CALL_DATA cd, rindex_t res, lindex_t op1, VALUE imm)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), imm, &val);

    if (val == Qundef) {
	th->cfp[1].pc -= 6; /* Execute cont_btcmp/cont_bfcmp after */
        RESTORE_REGS();
	set_default_sp(reg_cfp, reg_cfp->bp);
    } else if (jmp_p)
	JUMP(dst);
}

/* Speculative immediate integer insns:  */
DEFINE_INSN
ibteqi ibfeqi ibtnei ibfnei ibtlti ibflti ibtgti ibfgti ibtlei ibflei ibtgei ibfgei
(_, OFFSET dst, _, rindex_t res, lindex_t op1, VALUE imm)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), imm, &val);

    if (val == Qundef) {
	ADD_PC(-7); /* Re-execute the modified insn  */
    }
    else if (jmp_p)
	JUMP(dst);
}

/* Speculative immediate floating point insns:  */
DEFINE_INSN
fbteqf fbfeqf fbtnef fbfnef fbtltf fbfltf fbtgtf fbfgtf fbtlef fbflef fbtgef fbfgef
(_, OFFSET dst, _, rindex_t res, lindex_t op1, VALUE imm)
()
()
{
    VALUE val;
    int jmp_p = RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), imm, &val);

    if (val == Qundef) {
	ADD_PC(-7); /* Re-execute the modified insn  */
    }
    else if (jmp_p)
	JUMP(dst);
}

DEFINE_INSN
freeze_string
(lindex_t op, VALUE debug_info)
()
()
{
    freeze_string_f(reg_cfp, get_var_addr(reg_cfp, op), debug_info);
}

DEFINE_INSN
to_string
(rindex_t res, lindex_t op)
()
()
{
    to_string_f(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op));
}

DEFINE_INSN
concat_strings
(lindex_t start, rb_num_t cnt)
()
()
{
    concat_strings_f(reg_cfp, get_temp_addr(reg_cfp, start), cnt);
}

DEFINE_INSN
to_regexp
(sindex_t start, rb_num_t opt, rb_num_t cnt)
()
()
{
    to_regexp_f(reg_cfp, start, opt, cnt);
}

DEFINE_INSN
defined_p
(rindex_t res, lindex_t op, rb_num_t op_type, VALUE obj, VALUE needstr)
()
()
{
    defined_p_f(th, reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op), op_type, obj, needstr);
}

DEFINE_INSN
val_defined_p
(rindex_t res, VALUE v, rb_num_t op_type, VALUE obj, VALUE needstr)
()
()
{
    val_defined_p_f(th, reg_cfp, get_var_addr(reg_cfp, res), res, v, op_type, obj, needstr);
}

DEFINE_INSN
str_freeze_call
(rindex_t res, VALUE str)
()
()
{
    str_freeze_call_f(reg_cfp, get_var_addr(reg_cfp, res), res, str);
}

DEFINE_INSN
temp_ret
(lindex_t op, rb_num_t nf)
()
()
{
    VALUE val;

    if (temp_ret_f(th, reg_cfp, get_temp_addr(reg_cfp, op), nf, &val))
	return val;
    RESTORE_REGS();
    finish_ret(reg_cfp, val);
}

DEFINE_INSN
loc_ret
(lindex_t op, rb_num_t nf)
()
()
{
    VALUE val;

    if (loc_ret_f(th, reg_cfp, get_loc_addr(reg_cfp, op), nf, &val))
	return val;
    RESTORE_REGS();
    finish_ret(reg_cfp, val);
}

DEFINE_INSN
val_ret
(VALUE val, rb_num_t nf)
()
()
{
    if (val_ret_f(th, reg_cfp, val, nf, &val))
	return val;
    RESTORE_REGS();
    finish_ret(reg_cfp, val);
}

DEFINE_INSN
simple_call simple_call_self
(CALL_DATA cd, sindex_t call_start)
()
()
{
    struct rb_calling_info calling;

    RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, &calling, cd, call_start);
    CALL_METHOD(&calling, cd);
}

DEFINE_INSN
simple_call_recv
(CALL_DATA cd, sindex_t call_start, lindex_t recv_op)
()
()
{
    struct rb_calling_info calling;

    simple_call_recv_f(th, reg_cfp, &calling, cd, call_start, get_var_addr(reg_cfp, recv_op));
    CALL_METHOD(&calling, cd);
}

DEFINE_INSN
call vmcore_call call_self
(CALL_DATA cd, sindex_t call_start, ISEQ blockiseq)
()
()
{
    struct rb_calling_info calling;

    RTL_FUNC_NAME(CURRENT_INSN_NAME)(th, reg_cfp, &calling, cd, call_start, blockiseq);
    CALL_METHOD(&calling, cd);
}

DEFINE_INSN
call_recv
(CALL_DATA cd, sindex_t call_start, ISEQ blockiseq, lindex_t recv_op)
()
()
{
    struct rb_calling_info calling;

    call_recv_f(th, reg_cfp, &calling, cd, call_start, blockiseq, get_var_addr(reg_cfp, recv_op));
    CALL_METHOD(&calling, cd);
}

DEFINE_INSN
call_c_func
(rb_insn_func_t funcptr, sindex_t args_num)
()
()
{
    /* SP here is always on the stack beginning.  */
    reg_cfp->sp = reg_cfp->bp + 1 + args_num;
    reg_cfp = (funcptr)(th, reg_cfp);

    if (reg_cfp == 0) {
	VALUE err = th->errinfo;
	th->errinfo = Qnil;
	THROW_EXCEPTION(err);
    }

    RESTORE_REGS();
    set_default_sp(reg_cfp, reg_cfp->bp);
}

DEFINE_INSN
call_block
(CALL_DATA cd, sindex_t call_start)
()
()
{
    VALUE val = call_block_f(th, reg_cfp, cd, call_start);
    if (val == Qundef) {
	RESTORE_REGS();
    } else {
	*get_temp_addr(reg_cfp, call_start) = val;
    }
    set_default_sp(reg_cfp, reg_cfp->bp);
}

DEFINE_INSN
call_super
(CALL_DATA cd, sindex_t call_start, ISEQ blockiseq, VALUE rec_val)
()
()
{
    struct rb_calling_info calling;

    call_super_f(th, reg_cfp, &calling, cd, call_start, blockiseq, rec_val);
    CALL_METHOD(&calling, cd);
}

DEFINE_INSN
make_range
(rindex_t res, lindex_t op1, lindex_t op2, rb_num_t flag)
()
()
{
    make_range_f(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), flag);
}

DEFINE_INSN
make_array make_hash new_array_min new_array_max
(rindex_t res, sindex_t start, rb_num_t num)
()
()
{
    RTL_FUNC_NAME(CURRENT_INSN_NAME)(reg_cfp, get_var_addr(reg_cfp, res), res, start, num);
}

DEFINE_INSN
clone_array
(rindex_t res, VALUE arr)
()
()
{
    clone_array_f(reg_cfp, get_var_addr(reg_cfp, res), res, arr);
}

/* op1 is always in a temporary variable and it is a location of the
   result too.  */
DEFINE_INSN
spread_array
(lindex_t op1, rb_num_t num, rb_num_t flag)
()
()
{
    spread_array_f(reg_cfp, get_var_addr(reg_cfp, op1), num, flag);
}

DEFINE_INSN
splat_array
(rindex_t res, lindex_t arr, VALUE flag)
()
()
{
    splat_array_f(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, arr), flag);
}


DEFINE_INSN
concat_array
(rindex_t res, lindex_t op1, lindex_t op2)
()
()
{
    concat_array_f(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2));
}

DEFINE_INSN
bkw
(OFFSET dst, lindex_t kw_bits_index, rb_num_t keyword_index)
()
()
{
    if (bkw_f(th, reg_cfp, kw_bits_index, keyword_index))
	JUMP(dst);
}

DEFINE_INSN
check_match
(rindex_t res, lindex_t op1, lindex_t op2, rb_num_t flag)
()
()
{
    check_match_f(reg_cfp, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), flag);
}

DEFINE_INSN
bt_match
(OFFSET dst, rindex_t res, lindex_t op1, lindex_t op2, rb_num_t flag)
()
()
{
    if (bt_match_f(th, reg_cfp, get_temp_addr(reg_cfp, res), res, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), flag))
	JUMP(dst);
}

DEFINE_INSN
case_dispatch
(lindex_t op, CDHASH hash, OFFSET else_offset)
()
()
{
    OFFSET dst;

    if ((dst = case_dispatch_f(reg_cfp, get_var_addr(reg_cfp, op), hash, else_offset)) != 0)
	JUMP(dst);
}

DEFINE_INSN
regexp_match1
(rindex_t res, VALUE regex, lindex_t str_op)
()
()
{
    regexp_match1_f(reg_cfp, get_var_addr(reg_cfp, res), res, regex, get_var_addr(reg_cfp, str_op));
}

DEFINE_INSN
regexp_match2
(insn_t _, CALL_DATA cd, rindex_t res, lindex_t str_op, lindex_t regex_op)
()
()
{
    if (regexp_match2_f(th, reg_cfp, cd, get_var_addr(reg_cfp, res), res, get_var_addr(reg_cfp, str_op), get_var_addr(reg_cfp, regex_op))) {
	RESTORE_REGS();
	set_default_sp(reg_cfp, reg_cfp->bp);
    }
}

DEFINE_INSN
raise_except
(lindex_t op, rb_num_t throw_state)
()
()
{
    VALUE val = raise_except_f(th, reg_cfp, get_var_addr(reg_cfp, op), throw_state);
    THROW_EXCEPTION(val);
    /* unreachable */
}

DEFINE_INSN
raise_except_val
(VALUE throwobj, rb_num_t throw_state)
()
()
{
    VALUE val = raise_except_val_f(th, reg_cfp, throwobj, throw_state);
    THROW_EXCEPTION(val);
    /* unreachable */
}

DEFINE_INSN
define_class
(ID id, ISEQ class_iseq, rb_num_t flags, lindex_t op1, lindex_t op2, sindex_t stack_top)
()
()
{
    define_class(th, reg_cfp, id, class_iseq, flags, get_var_addr(reg_cfp, op1), get_var_addr(reg_cfp, op2), stack_top);
    RESTORE_REGS();
    set_default_sp(reg_cfp, reg_cfp->bp);
}

DEFINE_INSN
run_once
(rindex_t res, ISEQ iseq, IC ic)
()
()
{
    run_once_f(th, reg_cfp, get_var_addr(reg_cfp, res), res, iseq, ic);
}
